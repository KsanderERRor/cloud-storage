type User {
  _id: ID!
  email: String!
  password: String!
  discSpace: Int
  userSpace: Int
  avatar: String
  is_deleted: Boolean!
}

type file {
  _id: ID
  name: String!
  size: Int
  user: ID!
  path: String
  createdAt: Date
  updatedAt: Date
}

type UserPagination {
  dataUsers: [User!]
  page: Int
  perPage: Int
  total: Int
}

type Tokens {
  accessToken: String
  refreshToken: String
  userData: User
}

type FilesPagination {
  data: [file]
  page: Int
  perPage: Int
  total: Int
}

type Query {
  getOneUserById(id: ID!): User
  getUsersPagination(page: Int, perPage: Int, discSpace_gte: Int, discSpace_lte: Int, userSpace_gte: Int, userSpace_lte: Int, email: String): UserPagination!
  getFilesPagination(page: Int, perPage: Int, size_gte: Int, size_lte: Int, date_gte: Date, date_lte: Date, name: String, user: ID): FilesPagination
}
scalar Upload
scalar Date
type Mutation {
  createUser(email: String!, password: String!, discSpace: Int, userSpace: Int, avatar: String, is_deleted: Boolean): User
  deleteUser(id: ID!): User
  updateUser(id: ID!, email: String, password: String, discSpace: Int, userSpace: Int, avatar: String): User
  loginUser(email: String!, password: String!): Tokens
  logoutUser(token: String!): message
  upload(upload: Upload!, user: ID!): message
}

type message {
  message: String!
}
